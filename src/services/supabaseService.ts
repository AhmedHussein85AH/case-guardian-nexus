
import { supabase } from "@/integrations/supabase/client";
import { Case, CaseType, CasePriority, CaseStatus } from "@/types/case";

// This interface matches the actual structure in the Supabase "Cases Management" table
interface SupabaseCase {
  "Case ID": string | null;
  Description: string | null;
  "Incident Date": string | null;
  Location: string | null;
  Priority: string | null;
  Status: string | null;
  Type: string | null;
  id?: string; // This might be auto-generated by Supabase
}

// Helper function to convert from Supabase format to our app's Case format
const mapSupabaseCaseToAppCase = (supabaseCase: SupabaseCase): Case => {
  return {
    id: supabaseCase.id || crypto.randomUUID(), // Use provided ID or generate one
    caseId: supabaseCase["Case ID"] || "",
    description: supabaseCase.Description || "",
    incidentDate: supabaseCase["Incident Date"] || "",
    incidentTime: "", // Not directly available in Supabase structure
    location: supabaseCase.Location || "",
    unitNumber: "", // Not directly available in Supabase structure
    village: "", // Not directly available in Supabase structure
    priority: (supabaseCase.Priority?.toLowerCase() || "medium") as CasePriority,
    caseType: (supabaseCase.Type?.toLowerCase() || "other") as CaseType,
    status: (supabaseCase.Status?.toLowerCase() || "new") as CaseStatus,
    operatorName: "", // Not directly available in Supabase structure
    receivedAt: "", // Not directly available in Supabase structure
    createdAt: new Date().toISOString(),
    updatedAt: new Date().toISOString(),
  };
};

// Helper function to convert from our app's Case format to Supabase format
const mapAppCaseToSupabaseCase = (appCase: Case): SupabaseCase => {
  return {
    id: appCase.id,
    "Case ID": appCase.caseId,
    Description: appCase.description,
    "Incident Date": appCase.incidentDate,
    Location: appCase.location,
    Priority: appCase.priority,
    Status: appCase.status,
    Type: appCase.caseType,
  };
};

// Case functions
export const getAllCases = async (): Promise<Case[]> => {
  const { data, error } = await supabase
    .from('Cases Management')
    .select('*');
  
  if (error) {
    console.error("Error fetching cases:", error);
    throw error;
  }
  
  // Convert Supabase format to our app's Case format
  // Use a type assertion to explicitly cast the data to SupabaseCase[]
  const cases = ((data || []) as unknown as SupabaseCase[]).map(mapSupabaseCaseToAppCase);
  return cases;
};

export const getCaseById = async (id: string): Promise<Case | null> => {
  const { data, error } = await supabase
    .from('Cases Management')
    .select('*')
    .eq('id', id)
    .single();
  
  if (error) {
    if (error.code === 'PGRST116') { // Not found error code
      return null;
    }
    console.error("Error fetching case:", error);
    throw error;
  }
  
  // Convert Supabase format to our app's Case format using an explicit cast
  return data ? mapSupabaseCaseToAppCase(data as unknown as SupabaseCase) : null;
};

export const saveCase = async (caseData: Case): Promise<Case> => {
  // Convert app Case to Supabase format
  const supabaseCase = mapAppCaseToSupabaseCase(caseData);

  const { data, error } = await supabase
    .from('Cases Management')
    .upsert(supabaseCase)
    .select()
    .single();
  
  if (error) {
    console.error("Error saving case:", error);
    throw error;
  }
  
  // Convert back to app format with explicit casting
  return mapSupabaseCaseToAppCase(data as unknown as SupabaseCase);
};

export const createCase = async (caseData: Omit<Case, 'id'>): Promise<Case> => {
  // Generate a UUID client-side for better UX (avoid waiting for server response)
  const newCaseId = crypto.randomUUID();
  const caseIdNumber = Math.floor(10000 + Math.random() * 90000);
  
  const newCase: Case = {
    ...caseData,
    id: newCaseId,
    caseId: `CG-${caseIdNumber}`
  };
  
  // Convert app Case to Supabase format
  const supabaseCase = mapAppCaseToSupabaseCase(newCase);
  
  const { data, error } = await supabase
    .from('Cases Management')
    .insert(supabaseCase)
    .select()
    .single();
  
  if (error) {
    console.error("Error creating case:", error);
    throw error;
  }
  
  // Convert back to app format using the explicit type casting to avoid deep recursion
  return mapSupabaseCaseToAppCase(data as unknown as SupabaseCase);
};

export const deleteCase = async (id: string): Promise<boolean> => {
  const { error } = await supabase
    .from('Cases Management')
    .delete()
    .eq('id', id);
  
  if (error) {
    console.error("Error deleting case:", error);
    throw error;
  }
  
  return true;
};

// User functions
export const getAllUserProfiles = async () => {
  const { data, error } = await supabase
    .from('user_profiles')
    .select('*');
  
  if (error) {
    console.error("Error fetching user profiles:", error);
    throw error;
  }
  
  return data || [];
};

export const getUserProfile = async (userId: string) => {
  const { data, error } = await supabase
    .from('user_profiles')
    .select('*')
    .eq('id', userId)
    .single();
  
  if (error) {
    console.error("Error fetching user profile:", error);
    throw error;
  }
  
  return data;
};

export const updateUserProfile = async (userId: string, updates: any) => {
  const { data, error } = await supabase
    .from('user_profiles')
    .update(updates)
    .eq('id', userId)
    .select()
    .single();
  
  if (error) {
    console.error("Error updating user profile:", error);
    throw error;
  }
  
  return data;
};

export const createUserProfile = async (profile: any) => {
  const { data, error } = await supabase
    .from('user_profiles')
    .insert(profile)
    .select()
    .single();
  
  if (error) {
    console.error("Error creating user profile:", error);
    throw error;
  }
  
  return data;
};

export const updateUserPermissions = async (userId: string, permissions: any) => {
  const { data, error } = await supabase
    .from('user_profiles')
    .update({ permissions })
    .eq('id', userId)
    .select()
    .single();
  
  if (error) {
    console.error("Error updating user permissions:", error);
    throw error;
  }
  
  return data;
};

// Authentication helpers
export const getCurrentUser = async () => {
  const { data, error } = await supabase.auth.getUser();
  
  if (error) {
    console.error("Error getting current user:", error);
    throw error;
  }
  
  return data.user;
};

export const getCurrentSession = async () => {
  const { data, error } = await supabase.auth.getSession();
  
  if (error) {
    console.error("Error getting current session:", error);
    throw error;
  }
  
  return data.session;
};
